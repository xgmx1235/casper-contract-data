use casper_types::ApiError;

#[repr(u16)]
#[derive(Clone, Copy)]
pub enum Error {
    SafeCastValueNotFitInI256 = 10000,
    SafeCastValueNotFitInU256,
    InvalidContext,
    UpdateCauseLiquidation,
    InvalidTokenPair,
    InvalidLeverage,
    InvalidPositionSize,
    OrderManagerOnly,
    UnknownToken,
    AssetNotListed,
    InsufficientPoolAmount,
    ReserveReduceTooMuch,
    SlippageExceeded,
    ValueTooHigh,
    InvalidInterval,
    PositionNotLiquidated,
    ZeroAmount,
    ZeroAddress,
    RequireAllTokens,
    DuplicateToken,
    FeeDistributorOnly,
    InvalidMaxLeverage,
    SameTokenSwap,
    InvalidTranche,
    TrancheAlreadyAdded,
    RemoveLiquidityTooMuch,
    CannotDistributeToTranches,
    CannotSetRiskFactorForStableCoin,
    PositionNotExists,
    MaxNumberOfTranchesReached,
    TooManyTokenAdded,
    AddLiquidityNotAllowed,
    MaxGlobalShortSizeExceeded,
    NotApplicableForStableCoin,
    ContractLocked,
    OnlyOwnerCanRevoke,
    ContractPaused,
    InvalidKey,
    FailedToCreateDictionary,
    InvalidSide,
    ContractAlreadyInitialized,
    ExcessiveAmount,
    OMOnlyExecutor,
    OMMinExecutionFeeTooHigh,
    OMExecutionFeeTooLow,
    OMInvalidPurchaseAmount,
    OMInvalidPurchaseToken,
    OMInvalidAddress,
    InvalidUpdateType,
    InvalidOrderType,
    OMInvalidTokens,
    Phantom,
    FailedToGetArgBytes,
    OMOrderNotExists,
    OMInvalidOrPausedPool,
    OMBlockNotPass,
    OMUnauthorizedCancellation,
    OMNotFound,
    OMSlippageReached,
    PHPool,
    PHMultiplierTooHigh,
    PFTokenNotConfigured,
    PFStaled,
    PFInvalidDeviation,
    PFReporterNotExists,
    PFReporterAlreadyAdded,
    PFUnauthorized,
    PFLengthMissMatch,
    InvalidTestingMode,
}

impl From<Error> for ApiError {
    fn from(e: Error) -> Self {
        ApiError::User(e as u16)
    }
}

pub fn as_u16(err: Error) -> u16 {
    err as u16
}
